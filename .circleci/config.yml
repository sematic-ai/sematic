# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.5.0
  slack: circleci/slack@4.9.3
  codecov: codecov/codecov@3.2.3

commands:
  install-postgres:
    description: Install PostgreSQL
    steps:
      - run:
          name: Add PG 14 repository
          command: |
            sudo apt install wget gnupg
            sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
            wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
      - run:
          name: Install PostgreSQL
          command: sudo apt update && sudo apt install postgresql-14
  setup-bazel:
    description: |
      Setup the Bazel build system used for building Android projects
    steps:
      - run:
          name: Add Bazel Apt repository
          command: |
            sudo apt install curl gnupg
            curl -fsSL https://bazel.build/bazel-release.pub.gpg | gpg --dearmor > bazel.gpg
            sudo mv bazel.gpg /etc/apt/trusted.gpg.d/
            echo "deb [arch=amd64] https://storage.googleapis.com/bazel-apt stable jdk1.8" | sudo tee /etc/apt/sources.list.d/bazel.list
      - run:
          name: Install Bazel from Apt
          command: sudo apt update && sudo apt install bazel
  install-java:
    description: Install JAVA JDK
    steps:
      - run:
          command: |
            sudo apt install default-jre default-jdk
            export JAVA_HOME=/usr/lib/jvm/default-java


# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build-and-test: # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.10.2 container
    # Change the version below to your required version of python
    docker:
      - image: sematicai/sematic-ci:latest
    #  - image: cimg/python:3.9.10
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      # - install-postgres
      - checkout
      #- setup-bazel
      #- install-java
      - python/install-packages:
          pkg-manager: pip
          app-dir: ~/project/requirements  # If you're requirements.txt isn't in the root directory.
          pip-dependency-file: ci-requirements.txt  # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements.
      - run:
          # This is necessary because some packages have platform-dependent dependencies
          # For example sqlalchemy requires greenlet only on certain platforms
          name: Freeze requirements
          command: pip-compile --allow-unsafe ~/project/requirements/requirements.in > ~/project/requirements/requirements.txt
      - run:
          name: Linting
          command: python3 -m flake8 --max-line-length=90
      - run:
          name: MyPy
          command: mypy sematic
      - run:
          name: Run Non-coverage Tests
          # This assumes pytest is installed via the install-package step above
          command: PYTHONUNBUFFERED=1 bazel test //sematic/... --test_output=all
      - run:
          name: Run Coverage Tests
          # This assumes pytest is installed via the install-package step above
          command: PYTHONUNBUFFERED=1 bazel coverage //sematic/... --test_output=all --combined_report=lcov --test_tag_filters=cov
      - run:
          name: Link to codecov output
          command: ln -s $(bazel info output_path)/_coverage/_coverage_report.dat coverage.dat
      - codecov/upload
      - run:
          name: Build wheel
          command: make wheel
      - run:
          name: Test pip install
          command: bazel run //sematic/tests/integration:test_pip_install
      - slack/notify:
          channel: C03CPMXA1QU
          event: always

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  sematic-test:
    jobs:
      - build-and-test
