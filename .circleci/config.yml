# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.5.0
  slack: circleci/slack@4.9.3
  codecov: codecov/codecov@3.2.3

parameters:
  run_coverage:
    type: boolean
    default: false

commands:
  install-ci-pip-deps:
    description: Install CI pip deps
    steps:
      - python/install-packages:
          pkg-manager: pip
          app-dir: ~/project/requirements  # If you're requirements.txt isn't in the root directory.
          pip-dependency-file: ci-requirements.txt  # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements.
      - run:
          # This is necessary because some packages have platform-dependent dependencies
          # For example sqlalchemy requires greenlet only on certain platforms
          name: Freeze requirements
          command: pip-compile --allow-unsafe ~/project/requirements/requirements.in > ~/project/requirements/requirements.txt
  do-static-analysis:
    description: Do linting and other static analysis
    steps:
      - run:
          name: Linting
          command: python3 -m flake8 --max-line-length=90
      - run:
          name: MyPy
          command: mypy --version && mypy sematic
  non-coverage-tests:
    description: Do tests without tracking code coverage
    steps:
      - run:
          name: Run Non-coverage Tests
          # This assumes pytest is installed via the install-package step above
          command: PYTHONUNBUFFERED=1 bazel test //sematic/... --test_output=all
  coverage-tests:
    description: Do tests with coverage and upload coverage results
    steps:
      # try running coverage up to 4 times in a row. Weirdly, Circle doesn't
      # have a formal retry mechanism:
      # https://support.circleci.com/hc/en-us/articles/360043188514-How-to-Retry-a-Failed-Step-with-when-Attribute-
      - run:
          name: Set Up Coverage Tests
          # This assumes pytest is installed via the install-package step above
          command: echo "bazel coverage //sematic/... --test_output=all --combined_report=lcov --test_tag_filters=cov" > ./do_coverage && chmod +x ./do_coverage
      - run:
          name: Run Coverage Tests
          command: PYTHONUNBUFFERED=1 bash do_coverage
      - run:
          when: on_fail
          name: Retry Coverage Tests (1)
          command: PYTHONUNBUFFERED=1 bash do_coverage
      - run:
          when: on_fail
          name: Retry Coverage Tests (2)
          command: PYTHONUNBUFFERED=1 bash do_coverage
      - run:
          when: on_fail
          name: Retry Coverage Tests (3)
          command: PYTHONUNBUFFERED=1 bash do_coverage
      - run:
          name: Link to codecov output
          command: ln -s $(bazel info output_path)/_coverage/_coverage_report.dat coverage.dat
          when: on_fail
      - codecov/upload
  installation-tests:
    description: Do a test of installing sematic via wheel
    steps:
      - run:
          name: Build wheel
          command: make wheel
      - run:
          name: Test pip install
          command: bazel run //sematic/tests/integration:test_pip_install
  notify-completion:
    description: Send a notification to Slack about job completion
    steps:
      - slack/notify:
          channel: C03CPMXA1QU
          event: always
# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build-and-test:
    docker:
      - image: sematicai/sematic-ci:latest
    steps:
      - checkout
      - install-ci-pip-deps
      - do-static-analysis
      - non-coverage-tests
      - when:
          condition: << pipeline.parameters.run_coverage >>
          steps:
            - coverage-tests
      - installation-tests
      - notify-completion

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  sematic-test:
    jobs:
      - build-and-test
