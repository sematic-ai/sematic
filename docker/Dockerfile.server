# Dockerfile for the API server
# Ideally we would do this via Bazel instead but the py3_image rules
# are currently broken for M1 Macs

# see https://stackoverflow.com/questions/65612411/forcing-docker-to-use-linux-amd64-platform-by-default-on-macos/69636473#69636473
# for why --platform
FROM --platform=linux/amd64 python:3.9-bullseye
ARG EXTRA

RUN python3 -m pip install --upgrade pip

# Pre-install some requirements so that installing from the
# wheel takes less time. This improves caching behavior
# during development iterations, but should not be used
# for production builds, as it will install extra dependencies
# that aren't actually needed for the server to run.
# The most convenient way to leverage this is by using a script
# that automatically uncomments these lines and builds using the resulting
# Dockerfile, but you can manually uncomment them.
# Just make sure to have a requirements-dev-cache.txt file
# in the docker dir before uncommenting.
# <uncomment for pre-install-cache> COPY ./requirements*.txt /requirements/
# <uncomment for pre-install-cache> RUN pip install -r /requirements/requirements-dev-cache.txt

# Install from a local wheel
COPY sematic-*.whl .
RUN pip install $(ls ./sematic-*.whl)["${EXTRA}"]

# gevent fails when deployed to k8s unless you execute
# some monkey patching. See this: https://github.com/gevent/gevent/issues/1235
# Here we use a usercustomize [^1] module to
# ensure the monkey patch is applied before any other imports
# occur.
# [^1]: https://docs.python.org/3/library/site.html
RUN mkdir /pycustomizations && \
    echo "import gevent.monkey; gevent.monkey.patch_all(); print('Gevent monkey patch applied...')" > /pycustomizations/usercustomize.py
ENV PYTHONPATH="$PYTHONPATH:/pycustomizations"

EXPOSE 80
CMD python3 -m sematic.db.migrate up --verbose --env cloud && python3 -m sematic.api.server --env cloud
