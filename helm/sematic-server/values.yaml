auth:
  enabled: true
  google_oauth_client_id: xxxxxxxx.apps.googleusercontent.com # REPLACE ME
  authorized_email_domain: example.org # REPLACE ME

aws:
  enabled: true
  storage_bucket: my-s3-bucket # REPLACE ME
  bucket_region: my-s3-region # REPLACE ME

gcp:
  enabled: false
  storage:
    enabled: false
    bucket:  my-bucket # REPLACE ME
  service_account:
    secret:
      enabled: false
      name: gcp-sa # REPLACE ME
      file: the-key.json # REPLACE ME
  ingress:
    issuer:
      cluster: true
      name: letsencrypt-prod  # REPLACE ME

local_storage:
  enabled: false
  local_storage_path: /path/to/storage # REPLACE ME. Optional, defaults to ~/.sematic/data

slack:
  enabled: true
  slack_webhook_token: XXX/YYY/ZZZ # REPLACE ME

github:
  enabled: false
  github_access_token: github_pat_1234 # REPLACE ME

secret:
  create: true

cleaner:
  enabled: true
  crontab: "0-55/5 * * * *"
  ttlSecondsAfterFinished: 300

database:
  url: postgres://postgresql:5432/postgres # REPLACE ME
  auto_migrate: true

deployment:
  worker_count: 1
  replica_count: 2
  affinity: {}
  annotations: {}
  tolerations: {}
  node_selector: {}
  resources:
    limits:
      cpu: 250m
      memory: 2000Mi
    requests:
      cpu: 250m
      memory: 2000Mi
  autoscaling:
    enabled: false
    min_replicas: 2
    max_replicas: 5
    target_cpu_utilization_pct: 80
    target_memory_utilization_pct: 80
  security_context: {}
    # fs_group: 2000
  container_security_context: {}
    # capabilities:
    #   drop:
    #   - ALL
    # read_only_root_filesystem: true
    # run_as_non_root: true
    # run_as_user: 1000
  liveness_probe:
    failureThreshold: 6
    httpGet:
      path: /
      port: http
      scheme: HTTP
    initialDelaySeconds: 10
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 1
  readiness_probe:
    failureThreshold: 6
    httpGet:
      path: /
      port: http
      scheme: HTTP
    initialDelaySeconds: 10
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 1
  startup_probe:
    failureThreshold: 90
    httpGet:
      path: /
      port: http
      scheme: HTTP
    initialDelaySeconds: 2
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 1

image:
  repository: sematic/sematic-server
  #tag: vX.XX.X # If not specified, will use the Chart App version
  pull_policy: IfNotPresent
  #pull_secrets: []

ray:
  enabled: false
  supports_gpus: false
  gpu_node_selector: {}
  non_gpu_node_selector: {}
  gpu_annotations: {}
  non_gpu_annotations: {}
  gpu_labels: {}
  non_gpu_labels: {}
  gpu_tolerations: []
  non_gpu_tolerations: []
  gpu_resource_request_key: null
  busybox_image: "busybox:1.28"

rbac:
  create: true
  # Should the server be allowed to manage Ray clusters?
  # Should be 'true' if using Sematic's Ray or Spark
  # integrations.
  manage_ray: false

service_account:
  # Should a new service account be created? Or should we use
  # one that already exists?
  create: true

  # Annotations to add to the service account
  annotations: {}

worker:
  service_account:
    name: default
  can_customize_security_context: false
  can_mount_host_paths: false
  image_pull_secrets: null
  allowed_annotation_keys: []
  allowed_label_keys: []

service:
  create: true
  type: ClusterIP
  port: 80

ingress:
  create: false
  sematic_dashboard_url: https://my.sematic # REPLACE ME
  force_ssl: true
  class_name: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secret_name: chart-example-tls
  #    hosts:
  #      - chart-example.local
